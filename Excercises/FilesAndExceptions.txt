## Copyright 2010 Software Inventions, Inc
## 1. Basic file I/O
## 2. Exception handling -- raise, rescue, ensure
## 3. Exception hierarchy
## 4. ARGV
## 5. Float and related conversion methods
#
## One row of a grade sheet, including the student name and an arbitrary list
## of numerical grades,  Another row may be merged with this one, via "merge"
#
## Typical Graderow text input looks like this:
## Staley:  10  30  n/a  76
#
#class GradeRow
#   def initialize(name, grades)
#      @name = name                # Name of student
#      @grades = grades            # List of grades for them.
#   end
#
#   attr_accessor :grades, :name
#
#   def merge(other)
##     puts "Merging #{self} with #{other}"
#
#      for ndx in (0...other.grades.length)
#         if other.grades[ndx] != nil 
#            if grades[ndx] != nil
#               raise GradeConflict.new("Conflicting grades for " + @name)
#            elsif other.grades[ndx] < 0 || other.grades[ndx] > 100
#               raise RangeError.new("#{other.grades[ndx]} out of range.")
#            else
#               grades[ndx] = other.grades[ndx]
#            end
#         end
#      end
#   end
#
#   def to_s
#      rtn = "#{@name}: "
#      for i in @grades
#         rtn << (i == nil ? " --" : " #{i}")
#      end
#      rtn
#   end
#end
#
#class GradeException < Exception
#   def initialize(msg = nil)
#      super.new(msg)
#   end
#end
#      
#
## Process any "input" entity (I/O stream or otherwise) whose iterator produces
## a series of lines of the format <name> : grade1 grade2 ... gradeN   where
## grades are either numbers or "n/a".  Merge the GradeRow represented by each 
## line into a name-indexed hash of GradeRows in "grades".
#
#def processStream(input, grades)
#   for line in input 
#      begin
#         name, vals = line.split(":")
#         vals = vals.split.map {|grade| 
#            if grade == "n/a"
#               nil
#            else
#               begin
#                  Float(grade)
#               rescue ArgumentError
#                  nil
#               end
#            end
#         }
#
#         if grades.has_key?(name)
#            grades[name].merge(GradeRow.new(name, vals))
#         else
#            grades[name] = GradeRow.new(name, vals)
#         end
#   
#      rescue ArgumentError
#         puts "Dropping bad line due to malformed grade: #{line}"
#      rescue RangeError => err
#         puts "Dropping bad line due to out of range grade: #{err.message}"   
#      rescue Exception => err
#         puts "Fatal error in #{line}"
#         raise err         
#      end
#   end      
#end
#
#grades = Hash.new()
## Assume first commandline argument is a desired output file, and the 
## rest are input files holding lines of the format required by 
## processStream.  Process all input files, creating a single hash,
## which hash you then output to the output file.
#
#outName = ARGV.shift
#ARGV.each { |file|
#   begin
#      inFile = File.open(file, "r")
#      processStream(inFile, grades)
#   rescue Exception => err
#      puts "Stream processing failed: " + err.message
#   ensure
#      inFile.close
#   end
#}
#
#begin
#   outFile = File.open(outName, "w")
#
#   for pair in grades
#      outFile.puts pair[1]
#   end
#rescue Exception => err
#   puts "Output failed: " + err.message
#ensure
#   outFile.close
#end
#
## Test block -- "duck typing" makes such quick tests easy
#begin 
#   processStream([
#      "Staley: 12 14.5 what?",
#      "Jones: n/a n/a 9"
#   ], grades)
#
#   processStream([
#      "Staley: n/a n/a 12.0",
#      "Jones: 8 n/a n/a"
#   ], grades)
#
#rescue Exception => err
#   puts err.class
#   puts "Stream processing failed: " + err.message
#end
#
# Exercises
 
# 1. Modify the code so a malformed grade is simply replaced with a nil
# grade, having the same effect as "n/a".
 
 replace line 56 with : 
 
 vals = vals.split.map {|grade| 
    if grade == "n/a"
       nil
    else
       begin
          Float(grade)
       rescue ArgumentError
          nil
       end
    end
 }
  
# 2. Create a GradeConflict class, derived from Exception, and throw an
# instance of this class when grade conficts are discovered.

class GradeException < Exception
   def initialize(msg = nil)
      super.new(msg)
   end
end

and replace line 28 with:
raise GradeConflict.new("Conflicting grades for " + @name)
